#힌트 start end
# start =
# end =
# import sys
# input = sys.stdin.readline
#
# n = int(input())
# queue = []#[1,2]
#
# front = 0            #front번째 값을 볼 인덱스
# back =  -1           #back 번째 값을 볼 인덱스 1
#
# for _ in range(n):
#     order= input().split()
#
#     if order[0] == 'push':
#         queue.append(order[1])
#         back += 1
#
#     elif order[0] == 'pop':
#         if back - front == -1:
#             print(-1)
#         else:
#             print(queue[front])
#             front += 1
#     elif order[0] == 'size':
#         print(back - front + 1)
#     elif order[0] == 'empty':
#         print((back - front == -1) +0)
#     elif order[0] == "front":
#         if back -  front == -1:
#             print(-1)
#         else:
#             print(queue[front])
#     elif order[0] == "back":
#         if back - front == -1:
#             print(-1)
#         else:
#             print(queue[back])


def solution(bridge_length, weight, truck_weights):
    on_truck = []
    on_weight = 0
    seconds = 1

    on_weight += truck_weights[0]
    on_truck.append([truck_weights.pop(0), seconds + bridge_length])
    while True:
        if seconds >= on_truck[0][1]:
            truck = on_truck.pop(0)
            on_weight -= truck[0]

        if truck_weights:
            if on_weight + truck_weights[0] <= weight:
                on_weight += truck_weights[0]
                on_truck.append([truck_weights.pop(0), seconds + bridge_length])
        if not on_truck:
            break
        seconds += 1
    return seconds


bridge_length = 2
weight = 10
truck_weight = [7,4,5,6]
print(solution(bridge_length,weight,truck_weight))



#프로세스 프로그래머스
#42587
def solution(priorities, location):
    queue = []
    for i in range(len(priorities)):
        if priorities[i] is max(priorities):
            queue.append(priorities[i])
        else:
            
            
            
    

priorities = [2, 1, 3, 2]
location = 2
print(solution(priorities, location))
