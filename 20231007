
# def solution(priorities, location):
#     queue = []
#     # for i in range(len(priorities)):
#     #     if priorities[i] is max(priorities):
#     #         queue.append(priorities[i])
#     while len(queue) != len(priorities):
#         queue.append(max(priorities))
#
#     for i in range(len(queue)):
#         if priorities[location] == queue[i]:
#             return i
#
#
# priorities = [2, 1, 3, 2]
# location = 2
# print(solution(priorities, location))


# def solution(priorities, location):
#     p = list(zip(priorities,range(len(priorities))))
#     count = 0
#
#     while p:
#         item = p[0]
#         if item[0] != max(p)[0]:
#             p.append(p.pop(0))
#         elif item[1] == location:
#             count += 1
#             break
#         else:
#             count += 1
#             p.pop(0)
#     return count





# class QueueElement:
#     def __init__(self,data,link = None):
#         self.data = data
#         self.link = link
# class Queue:
#     def __init__(self):
#         self.rear = None    #<--rear:입구(가장 최근에 들어온 elment를 가리킨다.)
#         self.front = None   #<--front: 출구(다음에 나갈 element를 가리킨다.)
#
#     #data를 입력받고 element를 Queue에 추가하는 함수
#     def enque(self,data): #enque==push
#         if self.rear is None:
#             elem = QueueElement(data)
#             self.rear = self.front = elem
#         else:
#             elem = QueueElement(data)
#             self.rear.link = elem
#             self.rear = elem
#
#     def deque(self):
#         if self.front is None:
#             return None
#         #elem이 하나 있을때
#         elif self.rear == self.front:
#             ret_data = self.front.data
#             self.rear = self.front = None
#             return ret_data
#         #elem이 여러개 존재할때
#         else:
#             ret_data = self.front.data
#             self.front = self.front.link
#             return ret_data
#
#     def reverse(self):
#         current = self.front
#         previous = None
#         while current:
#             next = current.link
#             current.link = previous
#             current = next
#             previous = current
#         self.rear, self.front = self.front, self.rear
#
#
#
# q = Queue()
#
# for i in range(1,6):
#     q.enque(i)
# q.reverse()
# for _ in range(6):
#     print(q.deque())


#튜플 640465  (프로그래머스)
def solution(s):
    s = s.replace("{",'')
    s = s.replace("}",'')
    for i in range(len(s)):
        if i 
    return s
