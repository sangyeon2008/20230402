# 20230402
# # 구명보트 42885
# def solution(people, limit):
#     answer = 0
#     people.sort(reverse=True)
#     for i in range(people):
#         for j in range(people - people[i]):
#             if people[i] + people[j] <= limit:
#                 answer += 1
#                 del people[i]
#
#             else:
#                 answer += 1
#
#
#     return answer
#
#
# print(solution([70, 50, 80, 50], 100))

# def solution(people, limit):
#     answer = 0
#     people.sort()
#
#     a = 0
#     b = len(people) - 1
#     while a < b:
#         if people[b] + people[a] <= limit :
#             a+=1
#             answer += 1
#         b-=1
#     return len(people) - answer
# print(solution([70, 50, 80, 50], 100))

# class StackElement:
#     # 생성자 생성
#     def __init__(self,data,link):
#         #요소의 값
#         self.data = data
#         #다음 요소의 위치
#         self.lint = link
#
# class Stack:
#     def __init__(self):
#         # self.top: 항상 stack의 최상위 요소를 확인한다.
#         self.top = None
#
#     #가장 최사위 노드의 데이터를 return 하는 함수
#     def peek(self):
#         if self.top is None:
#             return None
#         else:
#             return self.top.data
#
#     def push(self,data):
#         if self.top is None:
#             elem = StackElement(data,None)
#             self.top = elem
#
#         else:
#             elem = StackElement(data,self.top)
#             self.top = elem
#
#     def pop(self):
#         if self.top is None:
#             return None
#
#         else:
#             ret_data = self.top.data
#             self.top= self.top.link
#             return ret_data
#
#
#
#
# st = Stack()
# print(st.peek)
#
# for i in range(1,6):
#     st.push(i)
#     print(st.peek())
# print()
#
# for _ in range(5):
#     print(st.pop())


# 42584
def solution(prices):
    answer = []
    for i in range(len(prices)):
        if prices[i] == min(prices):
            answer.append(len(prices)-1)
        else:
            for j in range(len([i+1:])):
                if prices[i] < prices[j]:
                    answer.append(j-i)
    return answer




print(solution([1, 2, 3, 2, 3]))
